I  have implemented my Path Planner in the file "algo.h". 

First, the PathPlanner() function first calls the PredictionModule() which uses sensor fusion data to generate predictions for other vehicles on road. It returns a vector of predicted trajectories which it believes will happen in next 1 second. 

Then, the algorithm calls select_states() function which returns the best action it believes for the vehicle. The returned states can be Keep Lane(KC), Lane Change Left(LCL), Lane Change Right(LCR) or Slowing Down(SLOW). The decision making logic is extremely simple. The algorithm first checks for cars in front of EGO vehicle. If it doesn't find any cars, it selects KL state. If a car is found to be blocking the lane, the algorithm checks for cars in left lane or right lane. If adjacent lanes are empty LCL or LCR states are selected. However, if both the lanes are full, the algorithm selects the SLOW state.

Finally, the selected state is passed to the generate_trajectory() function. This function is tasked with generating an apt path for the vehicle to follow according to selected state. The lane change manuvers are generated using spline.h library. 

The algorithm works pretty well for majority of the cases and was successfully able to drive the 4.32 miles track without incident. The EGO vehicle can be made more intellegent using more states in future, especially for high traffic situations. Eg, sometimes the car gets stuck in leftmost lane due to traffic in left and middle lane even though the rightmost lane is empty. Adding a state for Find Gap in middle lane could be helphul in these situations.

Please first run the path_planning file and then the simulator environment. The program might bug out otherwise.